-- a. Provide a list of customer names, along with the total dollar amount each customer has spent.
SELECT N.fname, N.lname, sum(B.sales_price * BO.quantity) as total_spent
FROM BOOK B
JOIN BOOK_ORDER BO on B.isbn = BO.isbn
JOIN "ORDER" O on BO.order_id = O.order_id
JOIN USER U on O.customer_id = U.user_id
JOIN NAME N on U.name_id = N.name_id
GROUP BY U.user_id;

-- b. Provide a list of customer names and e-mail addresses for customers who have spent more than the average customer.
SELECT N.fname, N.lname, sum(B.sales_price * BO.quantity) as total_spent
FROM BOOK B
JOIN BOOK_ORDER BO on B.isbn = BO.isbn
JOIN "ORDER" O on BO.order_id = O.order_id
JOIN USER U on O.customer_id = U.user_id
JOIN NAME N on U.name_id = N.name_id
GROUP BY U.user_id
HAVING total_spent > (SELECT avg(spent_per_c)
                     FROM ( SELECT sum(B.sales_price * BO.quantity) as spent_per_c
                            FROM BOOK B
                            JOIN BOOK_ORDER BO on B.isbn = BO.isbn
                            JOIN "ORDER" O on BO.order_id = O.order_id
                            JOIN USER U on O.customer_id = U.user_id
                            JOIN NAME N on U.name_id = N.name_id
                            GROUP BY U.user_id));

-- c. Provide a list of the titles in the database and associated total copies sold
-- to customers, sorted from the title that has sold the most individual copies to
-- the title that has sold the least.
SELECT B.title, sum(BO.quantity) as copies_sold
FROM BOOK B
JOIN BOOK_ORDER BO on B.isbn = BO.isbn
GROUP BY B.isbn
ORDER BY copies_sold DESC;

-- d. Provide a list of the titles in the database and associated dollar totals for
-- copies sold to customers, sorted from the title that has sold the highest dollar
-- amount to the title that has sold the smallest.
SELECT B.title, sum(BO.quantity * B.sales_price) as dollar_sold_total
FROM BOOK B
JOIN BOOK_ORDER BO on B.isbn = BO.isbn
GROUP BY B.isbn
ORDER BY dollar_sold_total DESC;